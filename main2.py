import client1
import numpy as np  
import random
import math

population_sz=10
generations =30
gnome_len =11
team_key ="THAt98zM1b3icQ1ai0cH9gkdnzDEFoMgspHYasoHHdpw2iChpl"


population =np.empty((population_sz,11))

#t = [0.0, -1.45799022e-12, -2.28980078e-13,  4.62010753e-11, -1.75214813e-10, -1.83669770e-15,  8.52944060e-16,  2.29423303e-05, -2.04721003e-06, -1.59792834e-08,  9.98214034e-10]
#t=[ 0.00000000e+00 ,-1.31219120e-12 ,-1.85473863e-13 , 3.74228710e-11,-1.73462665e-10, -2.22240422e-15 , 7.67649654e-16 , 2.77602197e-05,-2.25193103e-06, -1.43813551e-08,  9.88231894e-10]

#t=[ 0.00000000e+00 ,-1.26048563e-12 ,-1.65257212e-13 , 2.43076142e-11,-1.25189740e-10, -1.80014742e-15 , 1.00140903e-15 , 2.42421421e-05,-2.00647055e-06, -1.25587930e-08 , 8.80514618e-10]


#created from 8_3.txt 15 gen
#population = np.array([[0.0, -1.2604856310771117e-12, -1.65257211933e-13, 2.4307614206469002e-11, -1.2518973995715002e-10, -1.8001474182e-15, 1.0014090298534673e-15, 2.4242142073221273e-05, -2.00647054773e-06, -1.2558793024957411e-08, 8.805146175539998e-10], [0.0, -1.4005395900856797e-12, -1.65257211933e-13, 2.4307614206469002e-11, -1.3770871395286503e-10, -2.000163798e-15, 1.1015499328388141e-15, 2.69357134146903e-05, -1.9864058422527e-06, -1.3954214472174899e-08, 8.805146175539998e-10], [0.0, -1.4005395900856797e-12, -1.65257211933e-13, 2.4307614206469002e-11, -1.3770871395286503e-10, -2.000163798e-15, 1.0014090298534673e-15, 2.69357134146903e-05, -1.9864058422527e-06, -1.3954214472174899e-08, 8.805146175539998e-10], [0.0, -1.5405935490942478e-12, -1.8361912437e-13, 1.968916750723989e-11, -1.2518973995715002e-10, -1.62013267638e-15, 1.0014090298534673e-15, 2.69357134146903e-05, -1.8058234929569999e-06, -1.2685649520159e-08, 7.924631557985998e-10], [0.0, -1.5405935490942478e-12, -1.65257211933e-13, 2.18768527858221e-11, -1.2518973995715002e-10, -1.8001474182e-15, 1.0014090298534673e-15, 2.69357134146903e-05, -2.00647054773e-06, -1.14170845681431e-08, 7.924631557985998e-10], [0.0, -1.4005395900856797e-12, -1.65257211933e-13, 2.4307614206469002e-11, -1.2518973995715002e-10, -2.2001801778e-15, 1.0014090298534673e-15, 2.69357134146903e-05, -2.00647054773e-06, -1.027537611132879e-08, 8.805146175539998e-10], [0.0, -1.6946529040036726e-12, -2.221791404877e-13, 3.301034028039e-11, -1.851417154255185e-10, -1.8001474182e-15, 8.276107684739399e-16, 3.2921427506843706e-05, -2.45235289167e-06, -1.409516613351e-08, 9.685660793094e-10], [0.0, -1.86411819440404e-12, -2.221791404877e-13, 3.301034028039e-11, -1.851417154255185e-10, -1.98016216002e-15, 9.012681268681205e-16, 2.4242142073221273e-05, -1.8058234929569999e-06, -1.2685649520159e-08, 8.805146175539998e-10], [0.0, -1.6946529040036726e-12, -2.0198103680700001e-13, 2.406453806440431e-11, -1.3770871395286503e-10, -2.2001801778e-15, 1.1015499328388141e-15, 2.4487012195173e-05, -1.8058234929569999e-06, -1.5504682746861e-08, 1.0761845325659999e-09], [0.0, -1.5251876136033054e-12, -2.221791404877e-13, 2.406453806440431e-11, -1.2518973995715002e-10, -2.2001801778e-15, 9.10371845321334e-16, 2.9629284756159337e-05, -2.697588180837e-06, -1.409516613351e-08, 9.685660793094e-10]])

#created from 12th gen of 12_3_1
"""population = np.array([[0.0, -1.358942163720545e-12, -2.1558019783607483e-13, 1.949227583216749e-11, -1.3633162681333635e-10, -1.458119408742e-15, 8.030299010394954e-16, 2.4242142073221273e-05, -2.591292443135181e-06, -1.1302913722461669e-08, 8.543624528980285e-10],
[0.0, -1.1118617703168094e-12, -1.9796161417454068e-13, 2.358565375692266e-11, -1.0140368936529151e-10, -1.98016216002e-15, 7.949996020291005e-16, 2.6399692717737964e-05, -1.9274076023319524e-06, -1.857305946246479e-08, 9.492916143311428e-10],
[0.0, -1.2230479473484903e-12, -1.7816545275708662e-13, 1.9297353073845817e-11, -1.1154405830182067e-10, -1.782145944018e-15, 7.227269109355458e-16, 2.4242142073221273e-05, -2.1201483625651477e-06, -1.1302913722461669e-08, 8.543624528980285e-10],
[0.0, -1.2230479473484905e-12, -1.9402217805246734e-13, 2.165808425796388e-11, -1.239378425575785e-10, -1.458119408742e-15, 8.83332891143445e-16, 2.1817927865899146e-05, -1.9274076023319524e-06, -1.1302913722461669e-08, 8.458188283690482e-10],
[0.0, -1.2354019670186771e-12, -2.419530839911053e-13, 2.406453806440431e-11, -1.1267076596143502e-10, -1.8001474182e-15, 8.030299010394954e-16, 2.1817927865899146e-05, -2.591292443135181e-06, -1.0172622350215501e-08, 9.397986981878313e-10],
[0.0, -1.358942163720545e-12, -2.1558019783607483e-13, 2.165808425796388e-11, -1.3633162681333635e-10, -1.6039313496162e-15, 7.949996020291005e-16, 2.933299190859774e-05, -1.9274076023319524e-06, -1.857305946246479e-08, 8.543624528980285e-10],
[0.0, -1.1118617703168094e-12, -2.1775777559199475e-13, 2.358565375692266e-11, -1.0140368936529151e-10, -1.98016216002e-15, 7.949996020291005e-16, 2.933299190859774e-05, -2.1415640025910584e-06, -1.857305946246479e-08, 1.16024530640473e-09],
[0.0, -1.2230479473484903e-12, -1.7816545275708662e-13, 1.7367617766461234e-11, -1.0140368936529151e-10, -1.782145944018e-15, 7.227269109355458e-16, 2.4242142073221273e-05, -2.1201483625651477e-06, -1.1302913722461669e-08, 8.543624528980285e-10],
[0.0, -1.358942163720545e-12, -1.587454184065642e-13, 2.165808425796388e-11, -1.3633162681333635e-10, -1.458119408742e-15, 9.716661802577895e-16, 2.4242142073221273e-05, -1.9274076023319524e-06, -1.2433205094707836e-08, 7.689262076082257e-10],
[0.0, -1.2354019670186771e-12, -2.419530839911053e-13, 2.406453806440431e-11, -1.239378425575785e-10, -1.8001474182e-15, 8.030299010394954e-16, 2.4242142073221273e-05, -2.591292443135181e-06, -1.2433205094707836e-08, 9.397986981878313e-10]
])"""











def create_gnome():
    ans =  [random.uniform(-10.0,10.0) for _ in range(gnome_len)]
    return np.array(ans)

def sort_fn(population,fitness):
    return population[fitness.argsort()]

def mate(p1,p2):
    cut_index = 6
    child = np.zeros((11))
    child[:cut_index]=p1[:cut_index]
    child[cut_index:] = p2[cut_index:]
    return child



def mutate(population):
    for i in range(1,population_sz):
        for j in range(11):
            p= random.random()
            if p > 0.68 :
                p1 = random.random()
                if p1 > 0.5:
                    population[i][j] += 0.1*population[i][j]
                else:
                    population[i][j] -= 0.1*population[i][j]
                if population[i][j] <-10:
                    population[i][j] = -10
                elif population[i][j] > 10:
                    population[i][j] =10

    return population



def intialmutate(population):
    for i in range(2,population_sz):
        for j in range(11):
            p= random.random()
            if p < 0.68 :
                p1 = random.random()
                if p1 > 0.5:
                    population[i][j] += 0.3*population[i][j]
                else:
                    population[i][j] -= 0.3*population[i][j]
                if population[i][j] <-10:
                    population[i][j] = -10
                elif population[i][j] > 10:
                    population[i][j] =10

    return population



fitness =np.empty((population_sz))

'''
for k in range(8):
    population[k] = np.array(t)
for k in range(8,population_sz):
    population[k] = create_gnome()
'''
population =  mutate(population)

for i in range(population_sz):
    a= client1.get_errors(team_key,list(population[i]))
    fitness[i] = a[0]+a[1]

ans = np.empty((1,11))


for generation in range(1,generations+1):
    

    population = sort_fn(population,fitness)

    print("Generation: ",generation)
    print("Intial popln: ",)
    for i in range(population_sz):
       print(list(population[i]))

       
    
    
    new_generation = np.empty((population_sz,11))

    k= int(math.ceil(0.2*population_sz))
    
    for i in range(k):
        new_generation[i]= population[i]
    
    
    population = population[:int(population_sz/2)]

    print()
    print("After Selection:")    
    for i in range(int(population_sz/2)):
       print(list(population[i]))

    
    for i in range(k,population_sz):
        p1i =  random.randint(0,int(population_sz/2))
        p2i =  random.randint(0,int(population_sz/2))
        child = mate(population[p1i],population[p2i])
        new_generation[i]= child

    population = new_generation

    print()
    print("After CrossOver:")    
    for i in range(population_sz):
       print(list(population[i]))
   


    population =  mutate(population)
    
    print()
    print("After Mutation:")    
    for i in range(population_sz):
       print(list(population[i]))


    for i in range(population_sz):
        a= client1.get_errors(team_key,list(population[i]))
        fitness[i] = a[0]+a[1]
    
    population = sort_fn(population,fitness)
    ans = population[0]
    client1.submit(team_key,list(ans))
    print("Min of Generation:",generation ,": ", min(fitness))
    print("Best vector of this gen ",ans)
    print()


            




